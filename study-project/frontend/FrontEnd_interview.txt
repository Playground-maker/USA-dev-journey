1. 자바스크립트의 이벤트 루프가 어떻게 동작하는지 설명하고 마이크로태스크와 매크로태스크의 차이를 구체적으로 설명해주세요.

답변 : 자바스크립트는 싱글스레드 언어이므로 한번에 한개의 작업만 가능하지만 동시성을 위해서 이벤트 루프를 사용한다.
먼저 코드를 실행하면 동기 코드는 콜스택에 쌓이면서 실행되고 비동기 코드는 마이크로태스크 큐와 매크로태스크 큐에 쌓인다.
Promise then 같은 코드는 마이크로태스크 큐에 추가되며 setTimeout, setInterval 같은 코드는 매크로태스크 큐에 추가된다.
코드 내의 동기함수가 모두 실행되면 마이크로태스크 큐에 쌓인 함수들을 우선적으로 실행하며 마이크로태스크큐의 코드들이 모두 실행되면 매크로태스크 하나를 콜스택에 넣어 실행한다.
이 과정을 반복하며 동기코드와 비동기코드의 실행순서를 조율하고 UI 응답성을 유지하는것이 이벤트루프의 역할이다.

1-1. 고부하 상황에서 이벤트 루프가 어떻게 성능 저하를 유발할 수 있는지 설명해주세요.

답변 : 이벤트루프는 마이크로태스크를 우선적으로 처리하는데 마이크로태스크가 너무 많아지면 매크로태스크를 처리가 지연될 수 있다.
이로 인해 UI 업데이트가 늦어지거나 네트워크 응답 처리 지연이 발생할 수 있으므로 마이크로태스크 큐에 너무 많은 작업이 몰리지 않도록 관리하는것이 중요하다.

----------

2. React 컴포넌트의 불필요한 재렌더링에 의한 성능저하를 막기 위한 최적화 기법들이 어떻게 동작하는지 자세히 설명해주세요.

답변 : React는 state나 props가 변경될때마다 컴포넌트를 재렌더링 하고 자식 컴포넌트들도 함께 재렌더링 된다는 특성을 가지고 있다.
이로 인해 불필요한 재렌더링이 너무 많이 발생하는 문제가 생길 수 있다.
useMemo를 사용하여 특정값이 변경될때만 함수를 재실행하도록 하여 컴포넌트 재렌더링시 불필요한 재연산을 막을 수 있다.
useCallback을 사용하여 함수의 참조값을 고정하여 함수의 불필요한 재실행을 막을 수 있다.
React.Memo를 활용해 컴포넌트 자체를 메모이제이션 하여 props가 변경되지않으면 재렌더링되지 않도록 할 수 있다.
이러한 최적화 기법들은 의존성 배열 관리가 중요하며 잘못된 의존성 배열 설정은 오히려 성능 저하를 가져올 수 도 있다.

2-1. 대규모 애플리케이션에서 최적화 기법을 사용할때 발생할 수 있는 부작용과 React Profiler 같은 도구로 성능 문제를 어떻게 진단할 수 있는지 설명해주세요.

답변 : 대규모 애플레이케이션에서는 불필요한 최적화가 코드를 복잡하게 만들고 잘못된 의존성 배열 설정으로 성능 저하 문제가 발생할 수 있다.
또한 메모이제이션을 너무 많이 사용하면 메모리 사용량이 증가하여 오히려 성능을 저하시킬 수 있다.
React Profiler 같은 도구를 활용하면 컴포넌트들의 렌더링 시간을 측정하고 재렌더링이 많은 컴포넌트를 파악할 수 있다.
이러한 정보를 토대로 필요한 곳에만 최적화기법을 적용해야 한다.