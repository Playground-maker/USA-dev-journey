

1세트
1-1) 컴파일러와 인터프리터의 차이점을 설명해 주세요.
-> 컴파일러는 전체 소스 코드를 한 번에 기계어로 변환한 후 실행 파일을 생성하는 방식이며, 실행 속도가 빠르지만, 수정할 때마다 다시 컴파일해야 한다. 반면, 인터프리터는 코드를 한 줄씩 읽고 즉시 실행하는 방식으로, 실행 속도는 느리지만 수정이 즉시 반영된다.

1-2 ) 자바의 접근 제어자는 어떤 것들이 있으며, 각각의 특징은 무엇인가요?
-> 자바의 접근 제어자는 public, protected, default(package-private), private가 있다.

public : 모든 클래스에서 접근 가능
protected : 같은 패키지 또는 상속 관계에서 접근 가능
default(package-private) : 같은 패키지 내에서만 접근 가능
private : 해당 클래스 내에서만 접근 가능


2세트

2-1) 오버로딩과 오버라이딩의 차이점은 무엇인가요?
-> 오버로딩은 같은 클래스 내에서 메서드 이름이 같지만, 매개변수의 타입이나 개수를 다르게 정의하는 것을 의미하며, 컴파일 시 결정된다. 반면, 오버라이딩은 상속 관계에서 부모 클래스의 메서드를 자식 클래스에서 재정의하는 것으로, 런타임 시 결정된다.

2-2) 인터페이스와 추상 클래스의 차이점은 무엇인가요?
-> 인터페이스는 모든 메서드가 추상 메서드이며, 다중 구현이 가능하지만 상태(변수)를 가질 수 없다. 반면, 추상 클래스는 일반 메서드와 추상 메서드를 모두 포함할 수 있으며, 단일 상속만 가능하지만 상태(인스턴스 변수)를 가질 수 있다.

--------------------------------------------------------------

1. 컴파일 과정을 설명하시오
1-1. compiler vs interpreter

2. String / StringBuilder / StringBuffer의 차이점
2.1 thread safe 설명
2.2 자바에서 String이 불변 객체인 이유(내부적 메커니즘)

3. 자바의 접근 제어자의 종류와 특징

4. OOP의 4가지 특징(추상화, 캡슐화, 상속, 다형성)
4.1 캡슐화와 은닉화의 차이
4.2 오버로드와 오버라이딩의 차이

5. OOP의 5대 원칙(SOLID)

6. JVM 구조(중요 !)

7. 클래스 / 객체 / 인스턴스의 차이

8. interface와 abstract class의 차이점

9. Checked Exception vs Unchecked Exception

10. Call by reference vs Call by value
10-1. 자바는 어디에 해당하는가?



---------------------------------------------------------------
1. 스프링 프레임워크는 왜 생긴 것인가?

2. 스프링 DI란?
2-1. 객체 주입 방식
2-2. 생성자 방식의 이점
2-3. @Autowired, @Resource, @Inject의 차이점


3. Spring mvc life cycle?
3-1. filter와 interceptor의 차이점
---------------------------------------------------------------


1. HashMap vs HashTable vs ConcurrentHashMap 차이점(구현방식, thread 관련...)
1.1 thread safe


2. Java Immutable Object
2.1 Java String이 불변객체인 이유

3. new String()과 ""(리터럴 방식)의 차이에 대해

4. reflection / Java Dynamic Proxy 설명해 보시오

5. 자바의 Garbage Collector는 어떻게 동작하는지
5.1 GC 알고리즘은 무엇이 있는지

6. 제네릭이란 무엇이고 왜 사용하는가
